# -*- coding: utf-8; mode: python -*-

## Relies on angular commit style, without scope for simplicity, and semantic versioning.
## Uses the regex below to generate markdown changelogs from the `git log`, by default
## ignoring some automatic commits made by the release script, `scripts/release.sh`.


## Regex to ignore
ignore_regexps = [
    r'^[^:]+$',  # Ignore commits that do not have a colon
    r'^$',     # Ignore empty messages
    r'^Merge branch',
]


## Regex to classify as a section header
section_regexps = [
    ('Breaking Features', [
        r'^[fF]eat\!: (.*)$',
    ]),
    ('Features', [
        r'^[fF]eat: (.*)$',
    ]),
    ('Fixes', [
        r'^[fF]ix: (.*)$',
    ]),
    ('Build', [
        r'^[bB]uild: (.*)$',
    ]),
    ('CI', [
        r'^[cC][iI]: (.*)$',
    ]),
    ('Chore', [
        r'^[cC]hore: (.*)$',
    ]),
    ('Docs', [
        r'^[dD]ocs: (.*)$',
    ]),
    ('Performance', [
        r'^[pP]erf: (.*)$',
    ]),
    ('Refactor', [
        r'^[rR]efactor: (.*)$',
    ]),
    ('Test', [
        r'^[tT]est: (.*)$',
    ]),
    ('Other', [r'.*'])  # Match remaining lines
]


## Regex to classify as body text
body_process = ReSub(r'^(?!\s*$).+', r'') | strip


## Extract the summary from the commit message
subject_process = (strip |
    ReSub(r'^(?P<type>[a-z]+[!]?): (?P<summary>.*)$', r'\2') |
    SetIfEmpty("No commit message.") | ucfirst | final_dot)


## Regex to classify as semantic versioning tags
tag_filter_regexp = r'^[0-9]+\.[0-9]+(\.[0-9]+)?$'


## Label for the unreleased version section in the changelog
unreleased_version_label = "(main)"


## The output engine to use
#output_engine = rest_py
#output_engine = mustache("restructuredtext")
output_engine = mustache("markdown")
#output_engine = makotemplate("restructuredtext")


## Inlcude merge commits in the log (handled with regex instead)
include_merge = True


## Inserts the changelog at the top of the file
publish = FileInsertAtFirstRegexMatch(
    "CHANGELOG.md",
    r'^',
)


## Read all commits
revs = []